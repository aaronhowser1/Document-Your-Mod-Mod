buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven {
            name 'OpenMods Third Party'
            url 'http://repo.openmods.info/artifactory/simple/thirdparty'
        }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "2.3-SNAPSHOT"
        classpath group: "net.thesilkminer.gradle.translationchecker", name: "TranslationChecker", version: "1.1"
    }
}
apply plugin: "net.minecraftforge.gradle.forge"

static def getGitCommit() {
    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return proc.exitValue() ? "EINVAL(NO_GIT)" : proc.text.trim()
}

static def getBuildNumber() {
    return System.env.BUILD_NUMBER? System.env.BUILD_NUMBER : System.env.TRAVIS_BUILD_NUMBER
}

static def getBuildString() {
    return getBuildNumber()? "+build.${getBuildNumber()}" : ""
}

version = "${mod_version}" + getBuildString()
group = "com.aaronhowser1.dym" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "DocumentYourModMod"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = "${mappings_version}"

    replace "@VERSION@", project.version
    replace "@FINGERPRINT@", project.findProperty('signSHA1')
}

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    deobfProvided group: "mezz.jei", name: "jei_${mc_version}", version: "${jei_version}", classifier: "api"
    runtime group: "mezz.jei", name: "jei_${mc_version}", version: "${jei_version}"

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task updateTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "dym"
    templateFileName = "en_us.lang"
}

task checkTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "dym"
    dryRun = true
    templateFileName = "en_us.lang"
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from "build/source/main"
    classifier "deobf"
}

task signJar(type: SignJar, dependsOn: 'reobfJar') {
    onlyIf {
        project.hasProperty('keystore')
    }
    keyStore = project.findProperty('keystore')
    alias = project.findProperty('keystoreAlias')
    storePass = project.findProperty('keystorePass')
    keyPass = project.findProperty('keyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar

artifacts {
    archives deobfJar
}

jar {
    manifest {
        attributes([
                "Specification-Title": "Document Your Mod Mod",
                "Specification-Vendor": "aaronhowser1",
                "Specification-Version": "1.0.0",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"aaronhowser1; TheSilkMiner",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "GitCommit": "" + getGitCommit(),
                "BuildNumber": "" + getBuildNumber()
        ])
    }
}

wrapper {
    gradleVersion = "4.9"
    distributionType = Wrapper.DistributionType.ALL
}
